//////////////////////////////
// Definitions
//////////////////////////////

What is a graph
    A collection of vertices (or nodes, the V set) and the connections (called as edges, the E set between them(
    G = {V, E}

Graph Classification
    Based on direction of edges's direction
    Based on No. of edges connection 2 vertices
    Based on whether or not edges are evaluated (An edge may have proper data)
    Mix graph: a graph having multiple properties

----------------------------------------
Classification on Edge's direction
    Undirected Graph
    Directed Graph (digraph)
        each edge has it’s own direction (orientation)

Classification on No. of edges between vertices
    Simple graph
        2 distinct vertices joining only 1 edge
    Multigraph
        2 vertices can be joined by multiple edges
    Pseudograph
        Allow loops at 1 vertex

Classification based on whether or not edges are evaluated
    Weighted graph
        If each edge has an assigned number
    Un-weighted graph
----------------------------------------

Degree of a vertex
    Undirected graphs
        deg(v): no. of edges connecting with it
    Directed graphs
        In-degree, deg+(v): no. edges -> vertex (to vertex)
        Out-degree, deg-(v): vertex -> no. edges (from a degree)
        Total-degree, deg(v) = deg+(v) + deg-(v)

Paths and circuit/circle
    Path
        is a group of consecutive edges
    
    Circuit/circle
        is a closed path

Connectivity
    A graph is connected if and only if there exist a path between 2 arbitrary different vertices
    
    ----------------------------------
    Strong connected
        if there is a path from A -> B and B -> A

    Weak connected
        If there is a path from A -> B, not B -> A
    ----------------------------------

    Articulation point/cut vertex
        If you cut a special vertex, then it cause the graph unconnected

    Bridge/cut edge
        If you cut a special edge, then it cause the graph unconnected

//////////////////////////////
// Graph Representation
//////////////////////////////

2 ways to present data of a graph
    Using matrix (requires huge memory block)
        
        -----------------------------------------
        adjacency matrix (ma trận đỉnh kề)
            Can change to cost adacency matrix if weight is counted
        incidence matrix (ma trận cạnh nối)
        -----------------------------------------

    Using adjacency list (linked data structure, save memory)
        Can change to cost adjacency matrix if weight is counted

//////////////////////////////
// Graph Traversals
//////////////////////////////

Breadth-First Traversal

Depth-First Traversal


//////////////////////////////
// Shortest Paths
//////////////////////////////

Label(v) = {cost(v), predecessor(v)}

Classification
    Label-setting: (value is fixed)
        In each pass through the vertices still to be processed, 1 vertex is set to a value that remains unchanged to the end of the execution
        e.g. Dijkstra algorithm

    Label-correcting: (value is changed)
        Allow for the changing of any label
        
Some algorithms
    Dijkstra (Weight is no negative)
    Bellman-Ford (Weight can be +/-)
    A* (Using heuristics)
    Floyd-Warshall (Determine shortest path for all pair of vertices)
    Johnson (Like Floyd, but can be more efficient on a  sparse graph)


//////////////////////////////
// Spanning Trees
//////////////////////////////

A graph may have some spanning trees

In weighted graph, minimum spanning tree 
    is a spanning tree which sum of edge weights is minimum

How to construct minimum spanning tree
    Krushkal 
        weighted connected, undirected graph
        lấy cạnh có trọng số bé mà không tạo thành vòng
    Dijkstra
        weighted connected, undirected graph
    Prim-jarnik

//////////////////////////////
// Euler Path, Euler Cycles (edges)
//////////////////////////////


Euler Path
    a path traversing all the edges of the graph exactly once
    Conditions to have euler path

        Undirected Graph
            multigraph
            have 2 odd degree vertices
        
        Directed Graph
            have 2 vertices U and V
                1 vertex having deg(U)+ - deg(V)- = +1
                1 vertex having deg(U)+ - deg(V)- = -1
            

            
Euler cycle
    a cycle traversing all the edges of the graph exactly once
    Conditions to have euler cycle
        
        Undirected Graph
            multigraph
            each vertices has even degree
        
        Directed Graph
            for all vertex x 
                deg(x)+ = deg(x)-